// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: todo.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (id,title,description,status,created_at,updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, title, description, status, created_at, updated_at
`

type CreateTodoParams struct {
	ID          uuid.UUID
	Title       string
	Description string
	Status      bool
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAtodo = `-- name: DeleteAtodo :exec
DELETE FROM todos
where id = $1
`

func (q *Queries) DeleteAtodo(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAtodo, id)
	return err
}

const filterTodos = `-- name: FilterTodos :many
SELECT id, title, description, status, created_at, updated_at FROM todos
WHERE status = $1
`

func (q *Queries) FilterTodos(ctx context.Context, status bool) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, filterTodos, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTodos = `-- name: GetAllTodos :many
SELECT id, title, description, status, created_at, updated_at FROM todos
`

func (q *Queries) GetAllTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getAllTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTodoByID = `-- name: GetTodoByID :one
SELECT id, title, description, status, created_at, updated_at FROM todos
WHERE id = $1
`

func (q *Queries) GetTodoByID(ctx context.Context, id uuid.UUID) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodoByID, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const markTodoAsDone = `-- name: MarkTodoAsDone :one
UPDATE todos 
SET status = $1,
updated_at =$2
WHERE id = $3
RETURNING id, title, description, status, created_at, updated_at
`

type MarkTodoAsDoneParams struct {
	Status    bool
	UpdatedAt time.Time
	ID        uuid.UUID
}

func (q *Queries) MarkTodoAsDone(ctx context.Context, arg MarkTodoAsDoneParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, markTodoAsDone, arg.Status, arg.UpdatedAt, arg.ID)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
